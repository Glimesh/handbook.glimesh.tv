'use strict';(function(){const b={};b.doc={id:'id',field:['title','content'],store:['title','href']};const a=FlexSearch.create(b);window.geekdocSearchIndex=a,a.add({id:0,href:'/engineering/',title:"Engineering",content:""}),a.add({id:1,href:'/',title:"Glimesh Handbook",content:""}),a.add({id:2,href:'/engineering/running-payday/',title:"Running Payday",content:"Currently, our payday process is ran manually to ensure each week the automated process is working correctly. In the future (after Glimesh/glimesh.tv#618 is resolved), we should be able to run the process automatically.\nRunning Payday Manually The easiest way to run Payday is just to IEx into a web node, and run Glimesh.PaymentProviders.StripeProvider.payout(). However we don\u0026rsquo;t run that ever, because we want to manually review the transfers that are scheduled for the week.\nPreparing Transfers The Transfers.prepare_payouts/0 function will return a list of TransferRequests that you can then use to commit the payout. The function does not preform any modifications, it just prepares the transfers for later.\ntransfers = Glimesh.PaymentProviders.StripeProvider.Transfers.prepare_payouts() After this you can run a couple of commands to verify the outputs. Please note the amounts are in cents.\n# Check the payout amount Enum.sum(Enum.map(transfers, fn x -\u0026gt; x.transfer.amount end)) # Check the withholding amount Enum.sum(Enum.map(transfers, fn x -\u0026gt; x.transfer.metadata.total_withholding_amount end)) # Check the number of transfers length(transfers) Committing Transfers After you have verified the amounts with their respective Stripe or DB entries, you can commit the transfer.\nresults = Glimesh.PaymentProviders.StripeProvider.Transfers.commit_payouts(transfers) After this runs, it\u0026rsquo;ll give you a list of {:ok, stripe_transfer} or {:error, some_error}. Any errors will also be printed to the error logger for easy visibility.\n"}),a.add({id:3,href:'/engineering/regions/',title:"Regions",content:"Because of Glimesh\u0026rsquo;s focus on low latency, high quality streams, using regions close to you will give you the best experience.\nCurrent Web Regions Web hosts our platform infrastructure including the website, chat, api, and other direct user facing technology.\n   Computer Name Human Name DigitalOcean DC\u0026rsquo;s Notes     kjfk.web.glimesh.tv North America - New York NYC1, NYC2, NYC3     Current Live Regions Live hosts our video streaming infrastructure. It\u0026rsquo;s worth noting the live denotation is agnostic to the type of streaming being done (FTL, RTMP, WebRTC, etc).\n   Computer Name Human Name DigitalOcean DC\u0026rsquo;s Notes     kjfk.live.glimesh.tv North America - New York NYC1, NYC2, NYC3    kord.live.glimesh.tv North America - Chicago n/a Points to KJFK   ksfo.live.glimesh.tv North America - San Francisco SFO1, SFO2, SFO3 Points to KJFK   eham.live.glimesh.tv Europe - Amsterdam, Netherlands AMS1, AMS2 Points to KJFK   wsss.live.glimesh.tv Asia - Singapore SGP1 Points to KJFK   egll.live.glimesh.tv Europe - London, United Kingdom LON1 Points to KJFK   eddf.live.glimesh.tv Europe - Frankfurt, Germany FRA1 Points to KJFK   cyyz.live.glimesh.tv North America - Toronto, Canada TOR1 Points to KJFK   vobl.live.glimesh.tv Asia - Bangalore, India BLR1 Points to KJFK    Naming Convention Region Naming Convention Glimesh uses ICAO airport codes exclusively for it\u0026rsquo;s computer names, utilizing the nearest major cities largest passenger airport code. The intention of the ICAO codes is to provide a unique code for every geographical region.\nNode Naming Convention Full Syntax: [provider]-[provider-region]-[node-type][num].[full-icao-code].[purpose].glimesh.tv Examples: do-nyc3-ingest1.kjfk.live.glimesh.tv |- provider: do |- provider-region: nyc3 |- node-type: ingest |- num: 1 |- full-icao-code: kjfk |- purpose: live linode-us-central-edge342.kdfw.live.glimesh.tv |- provider: linode |- provider-region: us-central |- node-type: edge |- num: 342 |- full-icao-code: kdfw |- purpose: live "}),a.add({id:4,href:'/engineering/common-sql-queries/',title:"Common SQL Queries",content:"Deleting a user\u0026rsquo;s account and associated data --- Confirm the user\u0026#39;s existance and get their User ID select * from users where username = \u0026#39;some-fake-user\u0026#39;; --- Delete relational rows \u0026amp; user row delete from user_preferences where user_id = \u0026lt;user_id\u0026gt;; delete from email_logs where user_id = \u0026lt;user_id\u0026gt;; delete from channel_bans where user_id = \u0026lt;user_id\u0026gt;; delete from apps where user_id = \u0026lt;user_id\u0026gt;; delete from oauth_access_grants where resource_owner_id = \u0026lt;user_id\u0026gt;; delete from oauth_access_tokens where resource_owner_id = \u0026lt;user_id\u0026gt;; delete from oauth_applications where owner_id = \u0026lt;user_id\u0026gt;; delete from users where id = \u0026lt;user_id\u0026gt;; "}),a.add({id:5,href:'/company/',title:"Company",content:""}),a.add({id:6,href:'/company/teams/',title:"Teams",content:"Glimesh is an open company with the following teams, each with their own mission and scope. Members can be a part of many teams, or a single team.\nCore The core team is the glue that binds all the teams together and builds the company as a whole. Culture, branding, mission, and other high level goals are set by the core team.\nOther responsibilities:\n Accounting Business Partnerships Governance  Glimesh Community Team The GCT is a group of volunteer supporters of the platform, and it\u0026rsquo;s vision. The GCT\u0026rsquo;s goal is to provide a safe, fair, and efficient streaming platform through consistent and positive community interaction.\nThe Glimesh Community Team is broken up into geographic areas:\n Americas Europe / Africa Asia / Australia  With each geographic area having their own responsible team lead.\nDesign The design team of Glimesh is responsible for creating and driving our brand. Our brand is a combination of our voice as a company, our design, our narrative, and our soul.\nProduct Development Unlike traditional software development companies, we blur the line between Product \u0026amp; Engineering so heavily, they become one team. Collaboratively we hypothesise, create, monitor, and iterate on features.\n"}),a.add({id:7,href:'/engineering/deploying-the-site/',title:"Deploying the Site",content:"The Glimesh.tv deployments are now handled by running the ansible scripts found in Glimesh/ops\nRunning Migrations Currently, migrations are still ran very manually. After a web node is deployed you can run migrations on it by connecting to it via IEx.\niex --name \u0026#34;glimesh@dev\u0026#34; --cookie glimesh_secure_cookie --remsh glimesh@web1 ... iex(glimesh@web1)1\u0026gt; Glimesh.Release.migrate() "}),a.add({id:8,href:'/company/mission/',title:"Mission",content:"Our mission at Glimesh is to create a platform where every content creator has an opportunity to shine! We believe that the path to growth for all is by building a platform that puts the streamers \u0026amp; community first, not the advertisers.\n"}),a.add({id:9,href:'/company/values/',title:"Values",content:"Transparency We believe that secrets don’t make friends and we should all have an equal voice in how the services we use are made.\nCommunity Together, we’re better.\nEquality We believe all content creators, big or small, regardless of what they stream, deserve an equal chance at recognition for their hard work.\n"}),a.add({id:10,href:'/categories/',title:"Categories",content:""}),a.add({id:11,href:'/tags/',title:"Tags",content:""})})()