"use strict";(function(){const t={};t.doc={id:"id",field:["title","content"],store:["title","href"]};const e=FlexSearch.create(t);window.geekdocSearchIndex=e,e.add({id:0,href:"/company/",title:"Company",content:""}),e.add({id:1,href:"/",title:"Glimesh Handbook",content:""}),e.add({id:2,href:"/company/ownership/",title:"Ownership",content:`Glimesh, Inc. is an open company, which explains how we operate the business. However Glimesh is not a non-profit, or public company, instead it is a privately owned C Corporation registered in the state of Delaware in the United States. Glimesh, Inc. is currently wholly owned by Luke Strickland.
Ownership Stakes Luke Strickland - 100%
Future Ownership Plan There\u0026rsquo;s much about the ownership of Glimesh that we hope to change over time. Ideally we can build a hybrid company that embraces all of the required-transparency benefits of a non-profit, the original \u0026ldquo;price to cost\u0026rdquo; ideals of Gittip, and the compensation of correctly managed for-profit companies. Cooperatives are very similar in practice, but we\u0026rsquo;ll need to ensure we retain the ability to make decisions quickly. Currently the businesses primary focus, above organizational structure, is the growth and sustainability of the platform. If we do not exist, our organizational structure is irrelevant.
`}),e.add({id:3,href:"/company/open-company/",title:"Open Company",content:`Glimesh, Inc. is a new type of company, an open company. For Glimesh, this means that we develop all of our products publicly, from planning to development. All software we write is open source, and it\u0026rsquo;s active usage by others is encouraged. Our intellectual property is developed in the open and is published for all. We regularly share financial reports and other company data, without compromising customer privacy.
The line of transparency is an easy one to walk when you embrace a couple of key points:
Work in the public by default. Use tools like Trello, Github, blog posts, etc that embrace the public eye by default. Have conversations in open channels. Don\u0026rsquo;t share private customer information. Transparency of the company does not mean that private customer data is at risk. We consent as a company to open our books and records, but customers do not consent to their data being shared. Have regular meetings with open minutes. Solidify decisions by discussing them publicly, and codifying the results of them into minutes. History In the original manifesto published by Chad Whitacre of Gittip, open company philosophies were concretely defined. Specifically they included 3 important values: Share as much as possible; Charge as little as possible; Don’t compensate employees. As the open company philosophy started growing throughout companies, those values started to become more independent.
Today the open company philosophy is more focused on the transparency aspect, with the \u0026ldquo;price to cost\u0026rdquo; and \u0026ldquo;don\u0026rsquo;t compensate employees\u0026rdquo; split out as unique concepts. Many companies you know are now practicing open company ideals, like sharing their internal documents, open sourcing all of their code, and sharing their financials by default.
Common Questions Is a open company similar to a non-profit? Open companies \u0026amp; non-profits share a similar base of transparency, however an open company is not synonymous with a non-profit. Think of a non-profit as a legal organizational structure, and open company as a philosophy. A non-profit can be an open company, a for-profit can be an open company, but a non-profit cannot be a for-profit.
Does an open company mean everyone gets to make decisions? An open company is not encumbered by how work is organized and decided upon. A company can have a traditional reporting structure, a flat reporting structure, a democratized system and still practice open company values.
`}),e.add({id:4,href:"/engineering/",title:"Engineering",content:""}),e.add({id:5,href:"/engineering/running-payday/",title:"Running Payday",content:`Currently, our payday process is ran manually to ensure each week the automated process is working correctly. In the future (after Glimesh/glimesh.tv#618 is resolved), we should be able to run the process automatically.
Running Payday Manually The easiest way to run Payday is just to IEx into a web node, and run Glimesh.PaymentProviders.StripeProvider.payout(). However we don\u0026rsquo;t run that ever, because we want to manually review the transfers that are scheduled for the week.
Preparing Transfers The Transfers.prepare_payouts/0 function will return a list of TransferRequests that you can then use to commit the payout. The function does not preform any modifications, it just prepares the transfers for later.
transfers = Glimesh.PaymentProviders.StripeProvider.Transfers.prepare_payouts() After this you can run a couple of commands to verify the outputs. Please note the amounts are in cents.
# Check the payout amount Enum.sum(Enum.map(transfers, fn x -\u0026gt; x.transfer.amount end)) # Check the withholding amount Enum.sum(Enum.map(transfers, fn x -\u0026gt; x.transfer.metadata.total_withholding_amount end)) # Check the number of transfers length(transfers) Committing Transfers After you have verified the amounts with their respective Stripe or DB entries, you can commit the transfer.
results = Glimesh.PaymentProviders.StripeProvider.Transfers.commit_payouts(transfers) After this runs, it\u0026rsquo;ll give you a list of {:ok, stripe_transfer} or {:error, some_error}. Any errors will also be printed to the error logger for easy visibility.
`}),e.add({id:6,href:"/engineering/regions/",title:"Regions",content:`Because of Glimesh\u0026rsquo;s focus on low latency, high quality streams, using regions close to you will give you the best experience.
Current Web Regions Web hosts our platform infrastructure including the website, chat, api, and other direct user facing technology.
Computer Name Human Name DigitalOcean DC\u0026rsquo;s Notes kjfk.web.glimesh.tv North America - New York NYC1, NYC2, NYC3 Current Live Regions Live hosts our video streaming infrastructure. It\u0026rsquo;s worth noting the live denotation is agnostic to the type of streaming being done (FTL, RTMP, WebRTC, etc).
Computer Name Human Name Data Centers Notes cyyz.live.glimesh.tv North America - Toronto, Canada DO-TOR1 Points to KJFK eddf.live.glimesh.tv Europe - Frankfurt, Germany DO-FRA1 egll.live.glimesh.tv Europe - London, United Kingdom DO-LON1 eham.live.glimesh.tv Europe - Amsterdam, Netherlands DO-AMS1, DO-AMS2 kjfk.live.glimesh.tv North America - New York DO-NYC1, DO-NYC2, DO-NYC3 kord.live.glimesh.tv North America - Chicago n/a Points to KJFK ksfo.live.glimesh.tv North America - San Francisco DO-SFO1, DO-SFO2, DO-SFO3 sbgr.live.glimesh.tv South America - São Paulo, Brazil VR-sao-br Points to KJFK vobl.live.glimesh.tv Asia - Bangalore, India DO-BLR1 Points to KJFK wsss.live.glimesh.tv Asia - Singapore DO-SGP1 yssy.live.glimesh.tv Australia - Sydney, Australia VR-syd-au Data Centers: DO = DigitalOcean VR = Vultr
Naming Convention Region Naming Convention Glimesh uses ICAO airport codes exclusively for it\u0026rsquo;s computer names, utilizing the nearest major cities largest passenger airport code. The intention of the ICAO codes is to provide a unique code for every geographical region.
Node Naming Convention Full Syntax: [provider]-[provider-region]-[node-type][num].[full-icao-code].[purpose].glimesh.tv Examples: do-nyc3-ingest1.kjfk.live.glimesh.tv |- provider: do |- provider-region: nyc3 |- node-type: ingest |- num: 1 |- full-icao-code: kjfk |- purpose: live linode-us-central-edge342.kdfw.live.glimesh.tv |- provider: linode |- provider-region: us-central |- node-type: edge |- num: 342 |- full-icao-code: kdfw |- purpose: live `}),e.add({id:7,href:"/engineering/common-sql-queries/",title:"Common SQL Queries",content:"Deleting a user\u0026rsquo;s account and associated data --- Confirm the user\u0026#39;s existance and get their User ID select * from users where username = \u0026#39;some-fake-user\u0026#39;; --- Delete relational rows \u0026amp; user row delete from user_preferences where user_id = \u0026lt;user_id\u0026gt;; delete from email_logs where user_id = \u0026lt;user_id\u0026gt;; delete from channel_bans where user_id = \u0026lt;user_id\u0026gt;; delete from apps where user_id = \u0026lt;user_id\u0026gt;; delete from oauth_access_grants where resource_owner_id = \u0026lt;user_id\u0026gt;; delete from oauth_access_tokens where resource_owner_id = \u0026lt;user_id\u0026gt;; delete from oauth_applications where owner_id = \u0026lt;user_id\u0026gt;; delete from users where id = \u0026lt;user_id\u0026gt;; "}),e.add({id:8,href:"/company/teams/",title:"Teams",content:`Glimesh is an open company with the following teams, each with their own mission and scope. Members can be a part of many teams, or a single team.
Core The core team is the glue that binds all the teams together and builds the company as a whole. Culture, branding, mission, and other high level goals are set by the core team.
Other responsibilities:
Accounting Business Partnerships Governance Glimesh Community Team The GCT is a group of volunteer supporters of the platform, and it\u0026rsquo;s vision. The GCT\u0026rsquo;s goal is to provide a safe, fair, and efficient streaming platform through consistent and positive community interaction.
Design The design team of Glimesh is responsible for creating and driving our brand. Our brand is a combination of our voice as a company, our design, our narrative, and our soul.
Marketing The marketing team is responsible for creating ideas, collateral, and plans for marketing campaigns focused on the growth of Glimesh.
Product Development Unlike traditional software development companies, we blur the line between Product \u0026amp; Engineering so heavily, they become one team. Collaboratively we hypothesise, create, monitor, and iterate on features.
`}),e.add({id:9,href:"/engineering/deploying-the-site/",title:"Deploying the Site",content:`The Glimesh.tv deployments are now handled by running the ansible scripts found in Glimesh/ops
Running Migrations Currently, migrations are still ran very manually. After a web node is deployed you can run migrations on it by connecting to it via IEx.
iex --name \u0026#34;glimesh@dev\u0026#34; --cookie glimesh_secure_cookie --remsh glimesh@web1 ... iex(glimesh@web1)1\u0026gt; Glimesh.Release.migrate() `}),e.add({id:10,href:"/company/mission/",title:"Mission",content:`Our mission at Glimesh is to create a platform of sustainability, where every content creator has a fair opportunity to grow and create an income while being given simple and powerful tools they can rely on.
`}),e.add({id:11,href:"/company/values/",title:"Values",content:` This description of the values are currently in progress.
Community Fairness Service Sustainability Transparency `}),e.add({id:12,href:"/categories/",title:"Categories",content:""}),e.add({id:13,href:"/tags/",title:"Tags",content:""})})()